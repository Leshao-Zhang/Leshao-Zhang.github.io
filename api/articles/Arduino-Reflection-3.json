{"title":"Arduino 理解阻塞","slug":"Arduino-Reflection-3","date":"2020-06-16T11:08:22.000Z","updated":"2020-06-16T11:27:54.400Z","comments":true,"path":"api/articles/Arduino-Reflection-3.json","excerpt":"阻塞Arduino作为一个单片机，在不刷入特定系统前，是无法运行多线程的。在编写复杂功能的时候需要特别注意不能阻塞程序的运行。","covers":null,"content":"<h2 id=\"阻塞\"><a href=\"#阻塞\" class=\"headerlink\" title=\"阻塞\"></a>阻塞</h2><p>Arduino作为一个单片机，在不刷入特定系统前，是无法运行多线程的。</p>\n<p>在编写复杂功能的时候需要特别注意不能阻塞程序的运行。</p>\n<a id=\"more\"></a>\n\n<p>Arduino程序是由一个初始化方法setup()，和一个循环方法loop()构成。当初始化完成后，Arduino程序就会一直循环运行loop()内的语句。</p>\n<p>好的Arduino程序要充分利用Arduino有限的计算资源，不阻塞Arduino的持续运行。因此，在写Arduino程序的时候，我们需要避免使用delay()、while(1)等语句。</p>\n<h2 id=\"延时器\"><a href=\"#延时器\" class=\"headerlink\" title=\"延时器\"></a>延时器</h2><p>delay()方法是Arduino提供的一个延时方法，它会使Arduino停止运行一段时间，在这段时间内，Arduino将不能进行计算。频繁的使用delay()方法进行延时操作，会让基于时间的功能难以组织，如在任意多个时刻设置多个定时事件。</p>\n<p>Arduino提供了另一个方法millis()，millis()会返回当前Arduino运行了得毫秒数。用这个方法进行计时操作就不会阻塞Arduino程序的运行了。下面的方法可以提供delay(10)一样的延时10ms事件，但在这10ms内，Arduino仍然可以做许多其他的事。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unsigned int timer;</span><br><span class=\"line\">int delay&#x3D;10;</span><br><span class=\"line\"></span><br><span class=\"line\">setup()&#123;</span><br><span class=\"line\">\ttimer&#x3D;millis();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">loop()&#123;</span><br><span class=\"line\">  if(millis()-timer&gt;&#x3D;delay)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;do something;</span><br><span class=\"line\">    timer&#x3D;millis();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"状态机\"><a href=\"#状态机\" class=\"headerlink\" title=\"状态机\"></a>状态机</h2><p>状态机是一个非常好的简化事物行为的模型。我们通常可以将一个过程分解为一个接一个的状态，在一定条件下，状态会进行转变。</p>\n<p>状态机的基本形式是使用条件分支语句切换状态，代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> States &#123;state1,state2,state3,state4,…&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">States states = state1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span>(states)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> state1:</span><br><span class=\"line\">\t\t<span class=\"comment\">//do something;</span></span><br><span class=\"line\">\t\tstates = state2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> state2:</span><br><span class=\"line\">    <span class=\"comment\">//do something;</span></span><br><span class=\"line\">\t\tstates = state3;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> state3:</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用状态机可以让程序清晰明了，状态机最常用于多状态的程序。</p>\n<p>如果把不同的任务理解为不同的状态，状态机也可以用来模拟多任务和多线程的方法。</p>\n<h2 id=\"八音键盘\"><a href=\"#八音键盘\" class=\"headerlink\" title=\"八音键盘\"></a>八音键盘</h2><p>在制作简单的八音键盘时，需要用8个按键控制一个蜂鸣器发声。</p>\n<p>在Arduino中，可以使用tone(buzzPin,frequency[,duration])来控制蜂鸣器发声，用noTone()来结束蜂鸣器发声。通常的思路是当某个键被按下时，调用tone()进行发声，当未按时调用noTone()停止发声。代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pitches.h\"</span> <span class=\"comment\">//pitches.h lib is coming from example toneKeyboard</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//set Pins</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> buttonPin[] = &#123;<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> buttonCount = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> buzzerPin = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//set tone</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> notes[] = &#123;NOTE_C4,NOTE_D4,NOTE_E4,NOTE_F4,NOTE_G4,NOTE_A4,NOTE_B4,NOTE_C5&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; buttonCount;i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(buttonPin[i],<span class=\"literal\">INPUT</span>);<span class=\"comment\">//set pinMode</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; buttonCount;i++)&#123;<span class=\"comment\">//use for-loop read different key</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">digitalRead</span>(buttonPin[i]) == <span class=\"literal\">HIGH</span>)&#123;<span class=\"comment\">//if one button pressed</span></span><br><span class=\"line\">      <span class=\"built_in\">tone</span>(buzzerPin,notes[i]);<span class=\"comment\">//make voice</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">noTone</span>(buzzerPin);<span class=\"comment\">//else silence</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然而这样的写存在一个逻辑错误，一个按钮被按下并调用tone()发声时，将会调用7次noTone()停止发音，因为其他七个按钮未被按下。导致蜂鸣器无法发出清脆的音调。</p>\n<p>通过简单的将if替换为while可以解决这个逻辑错误。当某个按钮按下时，Arduino会一直激发tone()直到松开按钮。但是while的使用阻塞了Arduino的运行，使其他功能无法使用。所以我们需要改变思路，使用状态机的方法来发音。在八音键盘中共有9个状态，其中8种为8个键中一个被按下，最后一种为无键按下。我们还可以将其归结为2个状态，无键按下，和有键按下。这样程序就出来了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pitches.h\"</span> <span class=\"comment\">//pitches.h lib is coming from example toneKeyboard</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//set Pins</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> buttonPin[] = &#123;<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> buttonCount = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> buzzerPin = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//set tone</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> notes[] = &#123;NOTE_C4,NOTE_D4,NOTE_E4,NOTE_F4,NOTE_G4,NOTE_A4,NOTE_B4,NOTE_C5&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> note;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; buttonCount;i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(buttonPin[i],<span class=\"literal\">INPUT</span>);<span class=\"comment\">//set pinMode</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">  note=<span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; buttonCount;i++)&#123;<span class=\"comment\">//use for-loop read different key</span></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(<span class=\"built_in\">digitalRead</span>(buttonPin[i]) == <span class=\"literal\">HIGH</span>)&#123;<span class=\"comment\">//if one button pressed</span></span><br><span class=\"line\">     note=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(note&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">tone</span>(buzzerPin,notes[note]);<span class=\"comment\">//make voice</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">noTone</span>(buzzerPin);<span class=\"comment\">//else silence</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于结构的原因，蜂鸣器无法同时发出多个音调。所以本例也就未考虑同时多个按键被按下的情况。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>Arduino无法进行多线程运算，因此我们要避免阻塞式编程。通过用millis()代替delay()方法，和使用状态机编程，我们可以编写出功能复杂的Arduino硬件应用。</p>\n","more":"<p>Arduino程序是由一个初始化方法setup()，和一个循环方法loop()构成。当初始化完成后，Arduino程序就会一直循环运行loop()内的语句。</p>\n<p>好的Arduino程序要充分利用Arduino有限的计算资源，不阻塞Arduino的持续运行。因此，在写Arduino程序的时候，我们需要避免使用delay()、while(1)等语句。</p>\n<h2 id=\"延时器\"><a href=\"#延时器\" class=\"headerlink\" title=\"延时器\"></a>延时器</h2><p>delay()方法是Arduino提供的一个延时方法，它会使Arduino停止运行一段时间，在这段时间内，Arduino将不能进行计算。频繁的使用delay()方法进行延时操作，会让基于时间的功能难以组织，如在任意多个时刻设置多个定时事件。</p>\n<p>Arduino提供了另一个方法millis()，millis()会返回当前Arduino运行了得毫秒数。用这个方法进行计时操作就不会阻塞Arduino程序的运行了。下面的方法可以提供delay(10)一样的延时10ms事件，但在这10ms内，Arduino仍然可以做许多其他的事。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unsigned int timer;</span><br><span class=\"line\">int delay&#x3D;10;</span><br><span class=\"line\"></span><br><span class=\"line\">setup()&#123;</span><br><span class=\"line\">\ttimer&#x3D;millis();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">loop()&#123;</span><br><span class=\"line\">  if(millis()-timer&gt;&#x3D;delay)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;do something;</span><br><span class=\"line\">    timer&#x3D;millis();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"状态机\"><a href=\"#状态机\" class=\"headerlink\" title=\"状态机\"></a>状态机</h2><p>状态机是一个非常好的简化事物行为的模型。我们通常可以将一个过程分解为一个接一个的状态，在一定条件下，状态会进行转变。</p>\n<p>状态机的基本形式是使用条件分支语句切换状态，代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> States &#123;state1,state2,state3,state4,…&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">States states = state1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span>(states)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> state1:</span><br><span class=\"line\">\t\t<span class=\"comment\">//do something;</span></span><br><span class=\"line\">\t\tstates = state2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> state2:</span><br><span class=\"line\">    <span class=\"comment\">//do something;</span></span><br><span class=\"line\">\t\tstates = state3;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> state3:</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用状态机可以让程序清晰明了，状态机最常用于多状态的程序。</p>\n<p>如果把不同的任务理解为不同的状态，状态机也可以用来模拟多任务和多线程的方法。</p>\n<h2 id=\"八音键盘\"><a href=\"#八音键盘\" class=\"headerlink\" title=\"八音键盘\"></a>八音键盘</h2><p>在制作简单的八音键盘时，需要用8个按键控制一个蜂鸣器发声。</p>\n<p>在Arduino中，可以使用tone(buzzPin,frequency[,duration])来控制蜂鸣器发声，用noTone()来结束蜂鸣器发声。通常的思路是当某个键被按下时，调用tone()进行发声，当未按时调用noTone()停止发声。代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pitches.h\"</span> <span class=\"comment\">//pitches.h lib is coming from example toneKeyboard</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//set Pins</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> buttonPin[] = &#123;<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> buttonCount = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> buzzerPin = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//set tone</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> notes[] = &#123;NOTE_C4,NOTE_D4,NOTE_E4,NOTE_F4,NOTE_G4,NOTE_A4,NOTE_B4,NOTE_C5&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; buttonCount;i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(buttonPin[i],<span class=\"literal\">INPUT</span>);<span class=\"comment\">//set pinMode</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; buttonCount;i++)&#123;<span class=\"comment\">//use for-loop read different key</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">digitalRead</span>(buttonPin[i]) == <span class=\"literal\">HIGH</span>)&#123;<span class=\"comment\">//if one button pressed</span></span><br><span class=\"line\">      <span class=\"built_in\">tone</span>(buzzerPin,notes[i]);<span class=\"comment\">//make voice</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">noTone</span>(buzzerPin);<span class=\"comment\">//else silence</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然而这样的写存在一个逻辑错误，一个按钮被按下并调用tone()发声时，将会调用7次noTone()停止发音，因为其他七个按钮未被按下。导致蜂鸣器无法发出清脆的音调。</p>\n<p>通过简单的将if替换为while可以解决这个逻辑错误。当某个按钮按下时，Arduino会一直激发tone()直到松开按钮。但是while的使用阻塞了Arduino的运行，使其他功能无法使用。所以我们需要改变思路，使用状态机的方法来发音。在八音键盘中共有9个状态，其中8种为8个键中一个被按下，最后一种为无键按下。我们还可以将其归结为2个状态，无键按下，和有键按下。这样程序就出来了：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pitches.h\"</span> <span class=\"comment\">//pitches.h lib is coming from example toneKeyboard</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//set Pins</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> buttonPin[] = &#123;<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> buttonCount = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> buzzerPin = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//set tone</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> notes[] = &#123;NOTE_C4,NOTE_D4,NOTE_E4,NOTE_F4,NOTE_G4,NOTE_A4,NOTE_B4,NOTE_C5&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> note;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; buttonCount;i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">pinMode</span>(buttonPin[i],<span class=\"literal\">INPUT</span>);<span class=\"comment\">//set pinMode</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">  note=<span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; buttonCount;i++)&#123;<span class=\"comment\">//use for-loop read different key</span></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(<span class=\"built_in\">digitalRead</span>(buttonPin[i]) == <span class=\"literal\">HIGH</span>)&#123;<span class=\"comment\">//if one button pressed</span></span><br><span class=\"line\">     note=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(note&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">tone</span>(buzzerPin,notes[note]);<span class=\"comment\">//make voice</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">noTone</span>(buzzerPin);<span class=\"comment\">//else silence</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于结构的原因，蜂鸣器无法同时发出多个音调。所以本例也就未考虑同时多个按键被按下的情况。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>Arduino无法进行多线程运算，因此我们要避免阻塞式编程。通过用millis()代替delay()方法，和使用状态机编程，我们可以编写出功能复杂的Arduino硬件应用。</p>","categories":[{"name":"Arduino","path":"api/categories/Arduino.json"}],"tags":[{"name":"Arduino","path":"api/tags/Arduino.json"},{"name":"单片机","path":"api/tags/单片机.json"},{"name":"阻塞","path":"api/tags/阻塞.json"},{"name":"多任务","path":"api/tags/多任务.json"},{"name":"延时器","path":"api/tags/延时器.json"},{"name":"状态机","path":"api/tags/状态机.json"}]}