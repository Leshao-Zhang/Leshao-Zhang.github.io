<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Arduino BLINK LED</title>
    <url>/2020/06/15/Arduino_Reflection/</url>
    <content><![CDATA[<h2 id="BLINK"><a href="#BLINK" class="headerlink" title="BLINK"></a>BLINK</h2><p>在做过Arduino第一个实验BLINK之后看这篇笔记，可以加深对Arduino的理解。这篇文章不会讲代码怎么写，仅对电路实验的基本原理说明。</p>
<p>在学习Arduino时第一个电路实验大多为BLINK连接LED实验。</p>
<img data-src="/2020/06/15/Arduino_Reflection/Arduino_Reflection.png">

<p><em>图 1 LED 连接方法</em></p>
<a id="more"></a>

<p>将电路按图1连好，并把example里basic中的blink代码上传到Arduino之后，就可以看到LED灯一闪一闪了。</p>
<p>这个实验非常严简单，基本不会有太多惊讶与疑问。但如果仔细思考，还是会发现许多问题的。比如在这个实验中，我们知道给LED加上560欧的电阻是为了限流，但为什么要用560欧的电阻而不用1K欧，10K欧呢？</p>
<p>网上的资料显示，LED的工作电压一般为1.5-2V，工作电流一般为10-20ma，反向击穿电压为5V。而Arduino的pin口提供5V的电压，需要的电阻为150欧到350欧。根据欧姆定律，计算公式为：</p>
<img data-src="/2020/06/15/Arduino_Reflection/equation ohm.png">

<p>其中r为要求的电阻；Up 为pin口电压，此处为5V；UL 为LED的工作电压；I为LED的工作电流。</p>
<p><a href="http://www.21ic.com/calculator/LEDfaguang.htm" target="_blank" rel="noopener">http://www.21ic.com/calculator/LEDfaguang.htm</a> 提供了LED电路电阻计算器（图2）。</p>
<img data-src="/2020/06/15/Arduino_Reflection/Arduino_Reflection2.png">

<p><em>图 2 LED电路电阻计算器</em></p>
<p>经过计算，我们用的560欧的电阻比正常的LED电路需要的电阻大了一些。</p>
<p>这是因为我们的实验配发的Arduino套件中仅配发了560欧，2.2K欧与10K欧三种电阻。那么能用的就只有560欧这个最小的电阻了。</p>
<p>用过大电阻并非没有好处，这样做可以尽量保护电路不会过载，代价仅是LED稍微不那么亮了。当然需要注意的是在某些要求特定电压的电路中是不可以将就用电阻的。</p>
<p>这就是第一个Arduino实验中隐藏的小问题了。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在连接每一个电路的时候，一定要查清楚每个元器件的参数，其工作电压，工作电流等。通过合适的搭配电路元器件避免烧毁Arduino控制板和元器件。</p>
]]></content>
      <categories>
        <category>Arduino</category>
      </categories>
      <tags>
        <tag>Arduino</tag>
        <tag>欧姆定律</tag>
        <tag>电路</tag>
        <tag>LED</tag>
      </tags>
  </entry>
  <entry>
    <title>Arduino 深入理解按钮</title>
    <url>/2020/06/16/Arduino_Reflection_2/</url>
    <content><![CDATA[<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p>按钮是我们常用的硬件交互部件，也是我们学习Arduino一开始就接触到的部件。深入了解按钮的特性能够让我们搭建硬件原型的时候避免一些奇怪的BUG。</p>
<img data-src="/2020/06/16/Arduino_Reflection_2/figure 1.png">

<p><em>图1 按钮电路</em></p>
<a id="more"></a>

<h2 id="电路连接方法"><a href="#电路连接方法" class="headerlink" title="电路连接方法"></a>电路连接方法</h2><p>一个包含按钮的最简单的Arduino控制电路由一个按钮，一个电阻，三根电线和Arduino控制板组合而成。配的电阻一般较大，比如此处配10K欧，这个电阻十分重要，没有这个电阻，电路会有短路烧坏Arduino板的危险。</p>
<p><strong>Arduino Pin 口最大电流不得超过 40mA, 总电流不得超过200mA。</strong></p>
<p>按图1电路连好后上传EXAMPLE-&gt;DIGIT-&gt;BUTTON的代码就可以使用按钮控制Arduino板上的LED的明灭了。此时，按下按钮，LED亮；松开按钮LED灭。</p>
<p>还有一种连接方法是将上述电路中的5V与GND连线互换。这样，当按钮按下时LED灭，松开时LED亮。</p>
<p>我们称呼前一种电路为<strong>下拉电阻</strong>电路，后一种为<strong>上拉电阻</strong>电路。这一个电阻在两个电路中分别作为下拉电阻和上拉电阻。上拉电路和下拉电路有不同的应用方式。如要保持电路中存在电流，就要选用上拉电路，比如防盗电路。</p>
<h2 id="按钮消抖"><a href="#按钮消抖" class="headerlink" title="按钮消抖"></a>按钮消抖</h2><p>有时，我们做了一个按键计数器，就像这样：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> buttonPin 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> buttonPressed = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">boolean</span> buttonDown = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span>&#123;</span><br><span class="line">  buttonDown = <span class="built_in">digitalRead</span>(buttonPin);</span><br><span class="line">  <span class="keyword">if</span>(buttonDown &amp;&amp; !buttonPressed)&#123;<span class="comment">//按下</span></span><br><span class="line">    buttonPressed = <span class="literal">true</span>;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">println</span>(count);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!buttonDown)&#123;<span class="comment">//释放		</span></span><br><span class="line">      buttonPressed = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在我们的想象中，当我们每次按一下按钮，计数器就会加1。但是实际上当我们按下按钮时，计数器却一次增加了很多。代码好像又没写错，那到底是哪里出现了问题呢？</p>
<p>原来普通的弹簧按钮在按下去的时候会产生抖动，在5-10ms中，这个抖动的按钮可能已经开关电路好几次了，而计数器就计了好几次（如图2）。这就是这个BUG的罪魁祸首。</p>
<img data-src="/2020/06/16/Arduino_Reflection_2/figure 2.jpg">

<p><strong>图2 按键抖动</strong></p>
<p>可以用硬件或软件的方法消除这个抖动。</p>
<p>硬件的方法有RS触发器消抖(有兴趣自己去了解)和并联电容法（如图3）。</p>
<img data-src="/2020/06/16/Arduino_Reflection_2/figure 3.jpg">

<p><strong>图3 并联电容消抖</strong></p>
<p>使用硬件消抖会产生额外的硬件成本。而我们还有软件消抖法，即按下按键后10~20ms后再判断按键是否为抖动。以下为实现方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> buttonPin 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> buttonPressed = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">boolean</span> buttonDown = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">boolean</span> counted = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> timer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  buttonDown = <span class="built_in">digitalRead</span>(buttonPin);</span><br><span class="line">  <span class="keyword">if</span> (buttonDown &amp;&amp; !buttonPressed) &#123;<span class="comment">//按下</span></span><br><span class="line">    buttonPressed = <span class="literal">true</span>;</span><br><span class="line">    counted = <span class="literal">false</span>;</span><br><span class="line">    timer = <span class="built_in">millis</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (buttonDown &amp;&amp; <span class="built_in">millis</span>() - timer &gt; <span class="number">20</span> &amp;&amp; !counted) &#123;<span class="comment">//延迟20ms忽略抖动</span></span><br><span class="line">    count++;</span><br><span class="line">    counted = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">println</span>(count);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!buttonDown &amp;&amp; buttonPressed)<span class="comment">//释放</span></span><br><span class="line">    buttonPressed = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>按钮是最常用的电路元件之一，而要用好按钮，掌握上拉电阻电路、下拉电阻电路和按钮消抖是十分必要的。在设计搭建电路的同时，必须先考虑好电路要实现的功能，和可能会出现的问题，从而避免花费时间寻找BUG。</p>
]]></content>
      <categories>
        <category>Arduino</category>
      </categories>
      <tags>
        <tag>Arduino</tag>
        <tag>按钮</tag>
        <tag>上拉电阻</tag>
        <tag>下拉电阻</tag>
        <tag>按键消抖</tag>
      </tags>
  </entry>
  <entry>
    <title>Arduino 理解阻塞</title>
    <url>/2020/06/16/Arduino-Reflection-3/</url>
    <content><![CDATA[<h2 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h2><p>Arduino作为一个单片机，在不刷入特定系统前，是无法运行多线程的。</p>
<p>在编写复杂功能的时候需要特别注意不能阻塞程序的运行。</p>
<a id="more"></a>

<p>Arduino程序是由一个初始化方法setup()，和一个循环方法loop()构成。当初始化完成后，Arduino程序就会一直循环运行loop()内的语句。</p>
<p>好的Arduino程序要充分利用Arduino有限的计算资源，不阻塞Arduino的持续运行。因此，在写Arduino程序的时候，我们需要避免使用delay()、while(1)等语句。</p>
<h2 id="延时器"><a href="#延时器" class="headerlink" title="延时器"></a>延时器</h2><p>delay()方法是Arduino提供的一个延时方法，它会使Arduino停止运行一段时间，在这段时间内，Arduino将不能进行计算。频繁的使用delay()方法进行延时操作，会让基于时间的功能难以组织，如在任意多个时刻设置多个定时事件。</p>
<p>Arduino提供了另一个方法millis()，millis()会返回当前Arduino运行了得毫秒数。用这个方法进行计时操作就不会阻塞Arduino程序的运行了。下面的方法可以提供delay(10)一样的延时10ms事件，但在这10ms内，Arduino仍然可以做许多其他的事。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unsigned int timer;</span><br><span class="line">int delay&#x3D;10;</span><br><span class="line"></span><br><span class="line">setup()&#123;</span><br><span class="line">	timer&#x3D;millis();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loop()&#123;</span><br><span class="line">  if(millis()-timer&gt;&#x3D;delay)&#123;</span><br><span class="line">    &#x2F;&#x2F;do something;</span><br><span class="line">    timer&#x3D;millis();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h2><p>状态机是一个非常好的简化事物行为的模型。我们通常可以将一个过程分解为一个接一个的状态，在一定条件下，状态会进行转变。</p>
<p>状态机的基本形式是使用条件分支语句切换状态，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> States &#123;state1,state2,state3,state4,…&#125;;</span><br><span class="line"></span><br><span class="line">States states = state1</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(states)&#123;</span><br><span class="line">	<span class="keyword">case</span> state1:</span><br><span class="line">		<span class="comment">//do something;</span></span><br><span class="line">		states = state2;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> state2:</span><br><span class="line">    <span class="comment">//do something;</span></span><br><span class="line">		states = state3;</span><br><span class="line">  <span class="keyword">case</span> state3:</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用状态机可以让程序清晰明了，状态机最常用于多状态的程序。</p>
<p>如果把不同的任务理解为不同的状态，状态机也可以用来模拟多任务和多线程的方法。</p>
<h2 id="八音键盘"><a href="#八音键盘" class="headerlink" title="八音键盘"></a>八音键盘</h2><p>在制作简单的八音键盘时，需要用8个按键控制一个蜂鸣器发声。</p>
<p>在Arduino中，可以使用tone(buzzPin,frequency[,duration])来控制蜂鸣器发声，用noTone()来结束蜂鸣器发声。通常的思路是当某个键被按下时，调用tone()进行发声，当未按时调用noTone()停止发声。代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pitches.h"</span> <span class="comment">//pitches.h lib is coming from example toneKeyboard</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//set Pins</span></span><br><span class="line"><span class="keyword">int</span> buttonPin[] = &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> buttonCount = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> buzzerPin = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//set tone</span></span><br><span class="line"><span class="keyword">int</span> notes[] = &#123;NOTE_C4,NOTE_D4,NOTE_E4,NOTE_F4,NOTE_G4,NOTE_A4,NOTE_B4,NOTE_C5&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; buttonCount;i++)&#123;</span><br><span class="line">    <span class="built_in">pinMode</span>(buttonPin[i],<span class="literal">INPUT</span>);<span class="comment">//set pinMode</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span>&#123; </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; buttonCount;i++)&#123;<span class="comment">//use for-loop read different key</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">digitalRead</span>(buttonPin[i]) == <span class="literal">HIGH</span>)&#123;<span class="comment">//if one button pressed</span></span><br><span class="line">      <span class="built_in">tone</span>(buzzerPin,notes[i]);<span class="comment">//make voice</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">noTone</span>(buzzerPin);<span class="comment">//else silence</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然而这样的写存在一个逻辑错误，一个按钮被按下并调用tone()发声时，将会调用7次noTone()停止发音，因为其他七个按钮未被按下。导致蜂鸣器无法发出清脆的音调。</p>
<p>通过简单的将if替换为while可以解决这个逻辑错误。当某个按钮按下时，Arduino会一直激发tone()直到松开按钮。但是while的使用阻塞了Arduino的运行，使其他功能无法使用。所以我们需要改变思路，使用状态机的方法来发音。在八音键盘中共有9个状态，其中8种为8个键中一个被按下，最后一种为无键按下。我们还可以将其归结为2个状态，无键按下，和有键按下。这样程序就出来了：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pitches.h"</span> <span class="comment">//pitches.h lib is coming from example toneKeyboard</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//set Pins</span></span><br><span class="line"><span class="keyword">int</span> buttonPin[] = &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> buttonCount = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> buzzerPin = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//set tone</span></span><br><span class="line"><span class="keyword">int</span> notes[] = &#123;NOTE_C4,NOTE_D4,NOTE_E4,NOTE_F4,NOTE_G4,NOTE_A4,NOTE_B4,NOTE_C5&#125;;</span><br><span class="line"><span class="keyword">int</span> note;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; buttonCount;i++)&#123;</span><br><span class="line">    <span class="built_in">pinMode</span>(buttonPin[i],<span class="literal">INPUT</span>);<span class="comment">//set pinMode</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span>&#123; </span><br><span class="line">  note=<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; buttonCount;i++)&#123;<span class="comment">//use for-loop read different key</span></span><br><span class="line">	  <span class="keyword">if</span>(<span class="built_in">digitalRead</span>(buttonPin[i]) == <span class="literal">HIGH</span>)&#123;<span class="comment">//if one button pressed</span></span><br><span class="line">     note=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(note&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">tone</span>(buzzerPin,notes[note]);<span class="comment">//make voice</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">noTone</span>(buzzerPin);<span class="comment">//else silence</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于结构的原因，蜂鸣器无法同时发出多个音调。所以本例也就未考虑同时多个按键被按下的情况。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Arduino无法进行多线程运算，因此我们要避免阻塞式编程。通过用millis()代替delay()方法，和使用状态机编程，我们可以编写出功能复杂的Arduino硬件应用。</p>
]]></content>
      <categories>
        <category>Arduino</category>
      </categories>
      <tags>
        <tag>Arduino</tag>
        <tag>单片机</tag>
        <tag>阻塞</tag>
        <tag>多任务</tag>
        <tag>延时器</tag>
        <tag>状态机</tag>
      </tags>
  </entry>
</search>
